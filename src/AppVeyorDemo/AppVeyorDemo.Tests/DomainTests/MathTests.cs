namespace AppVeyorDemo.Tests.DomainTests
{
    using AppVeyorDemo.Tests.Utils;
    using FluentAssertions;
    using NUnit.Framework;

    public class MathTests
    {
        [TestCase(1, false)]
        [TestCase(2, true)]
        [TestCase(3, true)]
        [TestCase(4, false)]
        [TestCase(5, true)]
        [TestCase(6, false)]
        [TestCase(7, true)]
        [TestCase(8, false)]
        [TestCase(9, false)]
        [TestCase(10, false)]
        [TestCase(11, true)]
        [TestCase(12, false)]
        [TestCase(13, true)]
        [TestCase(14, false)]
        [TestCase(15, false)]
        [TestCase(16, false)]
        [TestCase(17, true)]
        [TestCase(18, false)]
        [TestCase(19, true)]
        [TestCase(20, false)]
        [TestCase(21, false)]
        [TestCase(22, false)]
        [TestCase(23, true)]
        [TestCase(24, false)]
        [TestCase(25, false)]
        [TestCase(26, false)]
        [TestCase(27, false)]
        [TestCase(28, false)]
        [TestCase(29, true)]
        [TestCase(30, false)]
        [TestCase(31, true)]
        [TestCase(32, false)]
        [TestCase(33, false)]
        [TestCase(34, false)]
        [TestCase(35, false)]
        [TestCase(36, false)]
        [TestCase(37, true)]
        [TestCase(38, false)]
        [TestCase(39, false)]
        [TestCase(40, false)]
        [TestCase(41, true)]
        [TestCase(42, false)]
        [TestCase(43, true)]
        [TestCase(44, false)]
        [TestCase(45, false)]
        [TestCase(46, false)]
        [TestCase(47, true)]
        [TestCase(48, false)]
        [TestCase(49, false)]
        [TestCase(50, false)]
        [TestCase(51, false)]
        [TestCase(52, false)]
        [TestCase(53, true)]
        [TestCase(54, false)]
        [TestCase(55, false)]
        [TestCase(56, false)]
        [TestCase(57, false)]
        [TestCase(58, false)]
        [TestCase(59, true)]
        [TestCase(60, false)]
        [TestCase(61, true)]
        [TestCase(62, false)]
        [TestCase(63, false)]
        [TestCase(64, false)]
        [TestCase(65, false)]
        [TestCase(66, false)]
        [TestCase(67, true)]
        [TestCase(68, false)]
        [TestCase(69, false)]
        [TestCase(70, false)]
        [TestCase(71, true)]
        [TestCase(72, false)]
        [TestCase(73, true)]
        [TestCase(74, false)]
        [TestCase(75, false)]
        [TestCase(76, false)]
        [TestCase(77, false)]
        [TestCase(78, false)]
        [TestCase(79, true)]
        [TestCase(80, false)]
        [TestCase(81, false)]
        [TestCase(82, false)]
        [TestCase(83, true)]
        [TestCase(84, false)]
        [TestCase(85, false)]
        [TestCase(86, false)]
        [TestCase(87, false)]
        [TestCase(88, false)]
        [TestCase(89, true)]
        [TestCase(90, false)]
        [TestCase(91, false)]
        [TestCase(92, false)]
        [TestCase(93, false)]
        [TestCase(94, false)]
        [TestCase(95, false)]
        [TestCase(96, false)]
        [TestCase(97, true)]
        [TestCase(98, false)]
        [TestCase(99, false)]
        [TestCase(100, false)]
        [TestCase(101, true)]
        public void should_return_true_for_prime_numbers(int number, bool expected)
        {
            // given

            // when
            var isPrime = number.IsPrime();
            // then
            isPrime.ShouldBeEquivalentTo(expected);
        }
    }
}
